# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    database_host: 127.0.0.1
    database_port: 3306
    database_name: radiopharma
    database_user: root
    database_password: null
    mailer_transport: smtp
    mailer_host: mail.lombego.de
    mailer_user: web33p1
    mailer_password: 'mUFwo#f!7gMy'
    mailer_name: admin@radiopharma24.de
    app_version: 0.0.1
    locale: en
    secret: e2df40f21e927d168bb306839845f4f683d4f69e44c46d8e9b325ebe43cea336
    doc_directory: '%kernel.root_dir%/../web/uploads/files'
    app.path.document_file: /uploads/files
    binary: '%kernel.root_dir%/../vendor/wemersonjanuario/wkhtmltopdf-windows/bin/64bit/wkhtmltopdf.exe'
    google_key: AIzaSyCok4jZhx21rgKeCIhw096dGc0mwe0M6_4
    secret1: 4f683d4f69e44c46d8e9b325ebe43cea336e2df40f21e927d168bb306839845f
    fallback_local: en

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    authentication.handler.login_success_handler:
            class:  App\EventListener\LoginSuccessHandler
            arguments:  ['@Symfony\Component\Routing\RouterInterface', '@Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface', '@FOS\UserBundle\Security\LoginManagerInterface','@Symfony\Component\HttpFoundation\Session\SessionInterface', '@Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface']
    app.authentication_failure_listener:
            class: App\EventListener\AuthenticationFailureListener
            calls:
                - [setLogger, ['@logger']]
            tags:
                - { name: monolog.logger, channel: security }
                - { name: kernel.event_listener, event: security.authentication.failure, method: onFailure }
    app.form.regsitration:
            class: App\Form\FrontEnd\RegistrationFormType
            tags:
                - { name: form.type}
    app.subscriber.easy_admin:
            class: App\EventListener\EasyAdminSubscriber
            autowire: true
            tags:
                - {name : kernel.event_subscriber}